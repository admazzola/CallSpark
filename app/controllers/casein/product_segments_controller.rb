# Scaffolding generated by Casein v5.1.1.5

module Casein
  class ProductSegmentsController < Casein::CaseinController
  
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Product segments'
  		@product_segments = ProductSegment.order(sort_order(:id)).paginate :page => params[:page]
    end
  
    def show
      @casein_page_title = 'View product segment'
      @product_segment = ProductSegment.find params[:id]
    end
  
    def new
      @casein_page_title = 'Add a new product segment'
    	@product_segment = ProductSegment.new
    end

    def create
      @product_segment = ProductSegment.new product_segment_params
    
      if @product_segment.save
        flash[:notice] = 'Product segment created'
        redirect_to casein_product_segments_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new product segment'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update product segment'
      
      @product_segment = ProductSegment.find params[:id]
    
      if @product_segment.update_attributes product_segment_params
        flash[:notice] = 'Product segment has been updated'
        redirect_to casein_product_segments_path
      else
        flash.now[:warning] = 'There were problems when trying to update this product segment'
        render :action => :show
      end
    end
 
    def destroy
      @product_segment = ProductSegment.find params[:id]

      @product_segment.destroy
      flash[:notice] = 'Product segment has been deleted'
      redirect_to casein_product_segments_path
    end
  
    private
      
      def product_segment_params
        params.require(:product_segment).permit(:id, :name)
      end

  end
end